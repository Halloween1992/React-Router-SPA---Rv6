{"version":3,"sources":["components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","useState","formValu","setFromValue","useHttp","addComment","sendRequest","status","error","quoteId","onLoadComments","useEffect","console","log","submitFormHandler","event","preventDefault","commentData","form","onSubmit","LoadingSpinner","control","htmlFor","value","onChange","e","target","rows","actions","Comments","isAddingComment","setIsAddingComment","useParams","getAllComments","data","onLoadCommentsHandler","useCallback","length","onClick"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,gICSrIC,EARK,SAACC,GACnB,OACE,oBAAIC,UAAWC,IAAQC,KAAvB,SACE,4BAAIH,EAAMI,U,iBCQDC,EAVM,SAACL,GACpB,OACE,oBAAIC,UAAWC,IAAQI,SAAvB,SACGN,EAAMM,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BJ,KAAMI,EAAQJ,MAA1BI,EAAQC,U,iBC+CnBC,EA9CQ,SAACV,GACtB,MAAiCW,mBAAS,IAA1C,mBAAOC,EAAP,KAAiBC,EAAjB,KAKA,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAErBC,EAA4BnB,EAA5BmB,QAASC,EAAmBpB,EAAnBoB,eAEjBC,qBAAU,WACO,cAAXJ,GAA2BC,GAC7BE,IAEFE,QAAQC,IAAI,eACX,CAACH,EAAgBF,EAAOD,IAE3B,IAAMO,EAAoB,SAACC,GACzBA,EAAMC,iBACNV,EAAY,CACVG,QAASA,EACTQ,YAAa,CAAEvB,KAAMQ,KAGvBC,EAAa,KAGf,OACE,uBAAMZ,UAAWC,IAAQ0B,KAAMC,SAAUL,EAAzC,UACc,YAAXP,GAAwB,cAACa,EAAA,EAAD,IACzB,sBAAK7B,UAAWC,IAAQ6B,QAASF,SAAUL,EAA3C,UACE,uBAAOQ,QAAQ,UAAf,0BACA,0BACEC,MAAOrB,EACPsB,SAhCgB,SAACC,GACvBtB,EAAasB,EAAEC,OAAOH,QAgChBxB,GAAG,UACH4B,KAAK,SAGT,qBAAKpC,UAAWC,IAAQoC,QAAxB,SACE,wBAAQrC,UAAU,MAAlB,+BCcOsC,UAnDE,WACf,MAA8C5B,oBAAS,GAAvD,mBAAO6B,EAAP,KAAwBC,EAAxB,KAEQtB,EADOuB,cACPvB,QAER,EAAsCL,YAAQ6B,KAAtC3B,EAAR,EAAQA,YAAa4B,EAArB,EAAqBA,KAAM3B,EAA3B,EAA2BA,OAK3BI,qBAAU,WACRL,EAAYG,KACX,CAACH,EAAaG,IAEjB,IAIIb,EAJEuC,EAAwBC,uBAAY,WACxC9B,EAAYG,KACX,CAACH,EAAaG,IAgBjB,MAZe,YAAXF,IAAsBX,EAAW,cAACwB,EAAA,EAAD,KAEtB,cAAXb,GAA0B2B,GAAQA,EAAKG,OAAS,IAClDzC,EAAW,cAAC,EAAD,CAAcA,SAAUsC,KAEtB,cAAX3B,GAA0B2B,GAAwB,IAAhBA,EAAKG,SACzCzC,EACE,8BACE,8DAKJ,0BAASL,UAAWC,IAAQI,SAA5B,UACE,gDACEkC,GACA,wBAAQvC,UAAU,MAAM+C,QA9BC,WAC7BP,GAAmB,IA6Bf,2BAIDD,GACC,cAAC,EAAD,CACErB,QAASA,EACTC,eAAgByB,IAGnBvC","file":"static/js/4.e734495c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1eydn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__a1MhC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2d9JJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3f4Mw\",\"loading\":\"NewCommentForm_loading__37bHV\",\"control\":\"NewCommentForm_control__ETmTp\",\"actions\":\"NewCommentForm_actions__3vypH\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const [formValu, setFromValue] = useState(\"\");\n  const onChangeHandler = (e) => {\n    setFromValue(e.target.value);\n  };\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { quoteId, onLoadComments } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onLoadComments();\n    }\n    console.log(\"useEffect\");\n  }, [onLoadComments, error, status]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    sendRequest({\n      quoteId: quoteId,\n      commentData: { text: formValu },\n    });\n\n    setFromValue(\"\");\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && <LoadingSpinner />}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea\n          value={formValu}\n          onChange={onChangeHandler}\n          id=\"comment\"\n          rows=\"5\"\n        ></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./Comments.module.css\";\nimport CommentsList from \"./CommentsList\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const { sendRequest, data, status } = useHttp(getAllComments);\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const onLoadCommentsHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") comments = <LoadingSpinner />;\n\n  if (status === \"completed\" && data && data.length > 0)\n    comments = <CommentsList comments={data} />;\n\n  if (status === \"completed\" && data && data.length === 0)\n    comments = (\n      <div>\n        <p>No comments were added yet</p>\n      </div>\n    );\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onLoadComments={onLoadCommentsHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n"],"sourceRoot":""}